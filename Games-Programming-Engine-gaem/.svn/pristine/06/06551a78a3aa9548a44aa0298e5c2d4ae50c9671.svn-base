#include "core\objectManager.h"

ObjectManager::ObjectManager()
{
	_nextId = 0;
}

ObjectManager::~ObjectManager()
{
}

void ObjectManager::initialize(RenderSystem &rendSys, BehaviourSystem &behvrSys)
{
	_rendSys = &rendSys;
	_behvrSys = &behvrSys;
}

unsigned int ObjectManager::createGameObject()
{
	// cache current id and advance next id by one
	unsigned int id = _nextId;
	_nextId += 1;

	// Add a game object and return id
	_gameObjects.emplace(id, SPtr_GameObject(new GameObject(id)));
	return id;
}

bool ObjectManager::addComponent(unsigned int ObjectID, SPtr_Component component)
{
	// Find object by ID
	std::unordered_map<unsigned int, SPtr_GameObject>::iterator it; // iterator for searching map
	it = _gameObjects.find(ObjectID);
	if(it == _gameObjects.end()) return false; // Failed! Iterator == end indicates key not found

	SPtr_Component addedComponent = it->second->addComponent(component);
	if(!addedComponent) return false; // this will happen if, for example, can only have one of them and object already has one

	// Add to subsystems based on type
	switch(addedComponent->getType())
	{
	case ComponentType::CAMERA: // camera - add to cameras in render system
		_rendSys->addCamera(std::static_pointer_cast<Camera>(addedComponent));
		break;

	case ComponentType::MODL_REND: // model renderer - add to render system
		_rendSys->addRenderObject(std::static_pointer_cast<ModelRenderer>(addedComponent));
		break;
	}

	return true;
}




bool ObjectManager::addBehaviour(unsigned int ObjectID, SPtr_Behaviour behaviour)
{
	// Find object by ID
	std::unordered_map<unsigned int, SPtr_GameObject>::iterator it; // iterator for searching map
	it = _gameObjects.find(ObjectID);
	if(it == _gameObjects.end()) return false; // Failed! Iterator == end indicates key not found

	// Link object to script and add to behaviour system
	behaviour->linkToObject(it->second);
	_behvrSys->addBehaviour(behaviour);
	return true;
}



void ObjectManager::destroyAll()
{
	_gameObjects.clear();
	_nextId = 0;
}