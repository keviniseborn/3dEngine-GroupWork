#include "behaviour\playerController.h"
#include <iostream>

PlayerController::PlayerController()
{
}

PlayerController::~PlayerController()
{
}

void PlayerController::initialize()
{
	addEventListener(EventType::UPDATE);
	addEventListener(EventType::FIXED_UPDATE);

	// Get Transform
	SPtr_Component comp = getComponent(ComponentType::TRANSFORM);
	_transform = std::static_pointer_cast<Transform>(comp); // cache transform so it can be manipulated in update

	// Get Camera's Transform
	SPtr_GameObject camera = ObjectManager::getGameObject("Camera");
	if(camera == nullptr) std::cout << "\n\n*********************\nCouldn't find camera!\n\n";
	else
	{
		comp =  camera->getComponent(ComponentType::TRANSFORM);
		_cameraTrans = std::static_pointer_cast<Transform>(comp);
	}

	// Get Robot Renderer
	comp = getComponent(ComponentType::ROB_REND);
	_robotAnim = std::static_pointer_cast<RobotRenderer>(comp);
	_robotAnim->setSpeed(10);

	_speed = 2;
	_turn = 0;
}

void PlayerController::update(float t)
{
	float axisH = 0;
	if(Input::getKeyHeld(sf::Keyboard::Left)) axisH = -1;
	else if(Input::getKeyHeld(sf::Keyboard::Right)) axisH = 1;

	float axisV = 0;
	if(Input::getKeyHeld(sf::Keyboard::Up)) axisV = 1;
	else if(Input::getKeyHeld(sf::Keyboard::Down)) axisV = -1;


	_velocity = _transform->getForward() * axisV * _speed;
	_turn = -axisH * _speed * 60;

	// Animation
	if(axisV == 0) _robotAnim->stop();
	else _robotAnim->play();

}

void PlayerController::fixedUpdate(float t)
{
	// Update transform
	_transform->translate(_velocity * t);
	_transform->rotate(glm::vec3(0, _turn * t, 0));

	// Update camera
	_cameraTrans->setPosition(_transform->getPosition());
	//_cameraTrans->setEulerAngles(_transform->getEulerAngles());
	_cameraTrans->translate(-_cameraTrans->getForward() * 5.0f);
}