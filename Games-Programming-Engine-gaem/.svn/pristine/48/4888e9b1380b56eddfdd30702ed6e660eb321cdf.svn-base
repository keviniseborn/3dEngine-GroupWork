#ifndef BEHAVIOUR_H
#define BEHAVIOUR_H

#include "core\gameObject.h"

//! Event types
enum EventType
{
	UPDATE, FIXED_UPDATE
};

//! Event struct -- not using event system now, maybe in future for collision events etc
/*
struct EventMsg
{
	static const unsigned int MAX_ARGS = 8;

	EventType type;
	unsigned int numArgs;

};
*/

/*! \brief Base class for call behaviours

	In this prototype, behaviours are hard-coded classes that extend this
	class. This is temporary - in the finished engine it is intended for
	these behaviours to be script files that will interface with the
	engine (possibly through through this class).

	Note script isn't a component. This is so it can query the game object it is
	associated with (the GO requires no knowledge of it as of yet). In the editor however
	it will probably appear that you are "adding" a script to the GO rather than this
	more abstract association. Ideally it would make sense if it was a component. There's
	also issues of how can a script query a GO for other scripts? This is something that
	can't really be resolved until true scripting is implemented - perhaps using an event messaging
	system?

*/

class Behaviour
{
public:
	friend class BehaviourSystem; //!< This allows only the behaviour system to call base update
	Behaviour();
	~Behaviour();

	void linkToObject(SPtr_GameObject gameObject);
	
protected:
	void addEventListener(EventType type); //!< Request certain events. Some events, like collisions, may be sent regardless (if a physics component is attached)
	virtual void initialize() = 0; //!< Children override. Called at start of first update
	virtual void update(float t){}; //!< Children overide with unique logic.
	virtual void fixedUpdate(float t){} //!< Children overide with unique logic.
	SPtr_Component getComponent(ComponentType::Type type);
	int getGameObjectId();

private:
	SPtr_GameObject _gameObject;
	bool _initialized;
	std::vector<EventType> _requestedEvents;

	bool baseInitialize(); //!< Mainly just checks "validity" - e.g. linked to a game object. Then calls initialize if ok
	bool baseUpdate(float t); //!< Called by engine, calls update() after checking if destoryed. By returning false on "fail" we indicate that this script needs to be destroyed
	

};

//! Define shared pointer to behaviour for easy use by systems (allowing shared responsibility for component as multiple systems may store references to it)
typedef std::shared_ptr<Behaviour> SPtr_Behaviour;





#endif