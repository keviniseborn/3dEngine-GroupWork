#include "core\sceneManager.h"

void SceneManager::initialize(ObjectManager &objMngr)
{
	_objMngr = &objMngr;
	writeDemoXML(); // This writes data to the example XML file
}


void SceneManager::createFromInitTable()
{
	InitTableIterator go;
	for(go = _initTable.begin(); go != _initTable.end(); ++go)
	{
		unsigned int goID = _objMngr->createGameObject(); // Create GO
		SPtr_Transform trans(nullptr); // this will store the transform if found (for components that require it)
		go->components.sort(); // sorts components so transform will be first and cached for later objects that require it
		
		// Iterate through every component and add it to the game object
		for(std::list<CompData>::iterator comp = go->components.begin(); comp != go->components.end(); ++comp)
		{
			// Set up dependancies - e.g. anything that needs transform
			switch (comp->getComp()->getType())
			{
				case ComponentType::TRANSFORM:
					trans = std::static_pointer_cast<Transform>(comp->getComp()); // at the moment this is how we cache transform. There are other ways - a search at the start for instance.
					break;

				// The below components require a transform. Currently no error checking - it would be nice if trans is currently null then it could create a transfrom and update init table.
				case ComponentType::CAMERA:
					std::static_pointer_cast<Camera>(comp->getComp())->setTransform(trans);
					break;
				case ComponentType::MODL_REND:
					std::static_pointer_cast<ModelRenderer>(comp->getComp())->setTransform(trans);
					break;
			}


			// add the component to game object
			_objMngr->addComponent(goID, comp->getComp()); 
		}

		// Iterate through behaviours and add to go
		for(int i = 0 ; i < go->behaviours.size(); ++i)
		{
			_objMngr->addBehaviour(goID, go->behaviours[i]);
		}
	}
}

void SceneManager::initFromInitTable()
{
	InitTableIterator go;
	for(go = _initTable.begin(); go != _initTable.end(); ++go)
	{
		// Iterate through every component and init it
		for(std::list<CompData>::iterator comp = go->components.begin(); comp != go->components.end(); ++comp)
		{
			switch(comp->getComp()->getType())
			{
				case ComponentType::TRANSFORM:	initTransform(*comp);	break;
				case ComponentType::CAMERA:		initCamera(*comp);		break;
				case ComponentType::MODL_REND:	initModelRend(*comp);	break;
			}
		}

		// Iterate through behaviours and init them
		for(int i = 0 ; i < go->behaviours.size(); ++i)
		{
			go->behaviours[i]->reset();
		}
	}
}





void SceneManager::initTransform(CompData &comp)
{
	float tx = comp.getFloatAttrib(0);
	float ty = comp.getFloatAttrib(1);
	float tz = comp.getFloatAttrib(2);

	float rx = comp.getFloatAttrib(3);
	float ry = comp.getFloatAttrib(4);
	float rz = comp.getFloatAttrib(5);

	float sx = comp.getFloatAttrib(6);
	float sy = comp.getFloatAttrib(7);
	float sz = comp.getFloatAttrib(8);

	SPtr_Transform transform = std::static_pointer_cast<Transform>(comp.getComp());
	transform->setPosition(glm::vec3(tx, ty, tz));
	transform->setEulerAngles(glm::vec3(rx, ry, rz));
	transform->setScale(glm::vec3(sx, sy, sz));
}


void SceneManager::initCamera(CompData &comp)
{

}


void SceneManager::initModelRend(CompData &comp)
{
	SPtr_ModelRend model = std::static_pointer_cast<ModelRenderer>(comp.getComp());
			
	// Figure out if the mesh is primitive or if it needs to be loaded in
	bool isPrimitive = (bool)comp.getIntAttrib(0);

	if(isPrimitive)
	{
		int shape = comp.getIntAttrib(1);
		model->setMesh(Assets::getPrimitiveMesh((PrimitiveShapes::Type)shape)); // set mesh
	}
	else
	{
		// TO DO...
		// Load model from file once mesh loader implemented
	}

	// Set Material
	if(comp.attribCount() >= 4) // then it has a texture
	{
		model->setMaterial(Assets::getShader(comp.getStringAttrib(2)), Assets::getTexture(comp.getStringAttrib(3))); // set material with shader and texture
	}
	else
	{
		model->setMaterial(Assets::getShader(comp.getStringAttrib(2))); // set material with just shader
	}
}








// Loads a scene from XML
/*
void SceneManager::loadFromXML(std::string filePath)
{
	TiXmlDocument doc(filePath);
	if(!doc.LoadFile())
	{
		std::cout << "Failed to load XML!\n\n\n";
		return;
	}

	TiXmlHandle handle(&doc);
	
	TiXmlElement* goElmnt;
	goElmnt = handle.FirstChildElement("GO").ToElement();
	for(goElmnt; goElmnt != NULL; goElmnt=goElmnt->NextSiblingElement())
	{
		// NOTE: Currently we just assume transform is first. In final version error checking might be in order, otherwise any component that requires transform and innits before it will fail
		unsigned int goID = _objMngr->createGameObject(); // Create GO
		SPtr_Transform trans(nullptr); // this will store the transform if found (for components that requqire it
			
		// Find components
		TiXmlElement* compElmnt = goElmnt->FirstChildElement("COMP");

		for(compElmnt; compElmnt != NULL; compElmnt=compElmnt->NextSiblingElement("COMP"))
		{
			
			// Check type and add component based on it
			if(compElmnt->Attribute("type"))
			{
				int cType; // component type
				compElmnt->Attribute("type", &cType);
				switch (cType)
				{
					case ComponentType::TRANSFORM:
						trans = newTransform(compElmnt);
						_objMngr->addComponent(goID, trans);
						break;
					case ComponentType::CAMERA:
						_objMngr->addComponent(goID, SPtr_Component(new Camera(trans)));
						break;
					case ComponentType::MODL_REND:
						_objMngr->addComponent(goID, newModelRend(compElmnt, trans)); // add model renderer component to object
						break;
				}
			}
		}

		// Find behaviours
		TiXmlElement* behvrElmnt = goElmnt->FirstChildElement("BHVR");
		for(behvrElmnt; behvrElmnt != NULL; behvrElmnt=behvrElmnt->NextSiblingElement("BHVR"))
		{
			// Output type
			if(behvrElmnt->Attribute("type"))
			{
				int bType;
				behvrElmnt->Attribute("type", &bType);
				switch (bType)
				{
				case BehaviourTypes::CAMERA_CON:
					_objMngr->addBehaviour(goID, SPtr_Behaviour(new CameraController()));
					break;
				case BehaviourTypes::ROT_OBJ:
					_objMngr->addBehaviour(goID, SPtr_Behaviour(new RotatingObject()));
					break;
				}
			}
		}
	}
}
*/

// load from XML into init table
void SceneManager::loadFromXML(std::string filePath)
{
	TiXmlDocument doc(filePath);
	if(!doc.LoadFile())
	{
		std::cout << "Failed to load XML!\n\n\n";
		return;
	}

	TiXmlHandle handle(&doc);
	
	TiXmlElement* goElmnt;
	goElmnt = handle.FirstChildElement("GO").ToElement();
	for(goElmnt; goElmnt != NULL; goElmnt=goElmnt->NextSiblingElement()) // foreach game object element in xml
	{
		_initTable.push_back(GOData()); // extend vector by one, creating a new data object
		GOData* goData = &_initTable.back(); // pointer to go data just created
			
		// Find components
		TiXmlElement* compElmnt = goElmnt->FirstChildElement("COMP");

		for(compElmnt; compElmnt != NULL; compElmnt=compElmnt->NextSiblingElement("COMP"))
		{
			// Check type and add component based on it
			if(compElmnt->Attribute("type"))
			{
				int cType; // component type
				compElmnt->Attribute("type", &cType);
				switch (cType)
				{
					case ComponentType::TRANSFORM:	 goData->components.push_back(newTransformData(compElmnt));	 break;
					case ComponentType::CAMERA:		 goData->components.push_back(newCameraData(compElmnt));		 break;
					case ComponentType::MODL_REND:	 goData->components.push_back(newModelRendData(compElmnt));	 break;
				}
			}
		}

		// Find behaviours
		TiXmlElement* behvrElmnt = goElmnt->FirstChildElement("BHVR");
		for(behvrElmnt; behvrElmnt != NULL; behvrElmnt=behvrElmnt->NextSiblingElement("BHVR"))
		{
			// Output type
			if(behvrElmnt->Attribute("type"))
			{
				int bType;
				behvrElmnt->Attribute("type", &bType);
				switch (bType)
				{
					case BehaviourTypes::CAMERA_CON:	 goData->behaviours.push_back(SPtr_Behaviour(new CameraController()));	 break;
					case BehaviourTypes::ROT_OBJ:		 goData->behaviours.push_back(SPtr_Behaviour(new RotatingObject()));		 break;
				}
			}
		}
	}
}


CompData SceneManager::newTransformData(TiXmlElement* compElmnt)
{
	CompData transformData(SPtr_Transform(new Transform())); // new component and data
	double params[9]; // 9 float params for translate, rotation and scale (in that order)
	
	// Read in attributes to array in correct order
	compElmnt->Attribute("tx", &params[0]);
	compElmnt->Attribute("ty", &params[1]);
	compElmnt->Attribute("tz", &params[2]);
	compElmnt->Attribute("rx", &params[3]);
	compElmnt->Attribute("ry", &params[4]);
	compElmnt->Attribute("rz", &params[5]);
	compElmnt->Attribute("sx", &params[6]);
	compElmnt->Attribute("sy", &params[7]);
	compElmnt->Attribute("sz", &params[8]);

	for(int i = 0; i < 9; ++i)
	{
		transformData.addAttribf(params[i]);
	}

	return transformData;
}

CompData SceneManager::newCameraData(TiXmlElement* compElmnt)
{
	CompData cameraData(SPtr_Camera(new Camera())); // new component and data
	return cameraData;
}

CompData SceneManager::newModelRendData(TiXmlElement* compElmnt)
{
	CompData cameraData(SPtr_ModelRend(new ModelRenderer())); // new component and data

	// Figure out if the mesh is primitive or if it needs to be loaded in
	if(!compElmnt->Attribute("primitive")) return cameraData; // return if can't find attrib, something went wrong!
	int isPrimitive;
	compElmnt->Attribute("primitive", &isPrimitive);
	cameraData.addAttribi(isPrimitive); // attrib 0 is primitive as int

	if((bool)isPrimitive)
	{
		int shape;
		compElmnt->Attribute("mesh", &shape);
		cameraData.addAttribi(shape); // if primitive, attrib 1 is shape as int
	}
	else
	{
		cameraData.addAttribs(compElmnt->Attribute("mesh")); // if not primitive, attrib 1 is mesh file path as string
	}

	// Get Material Info
	cameraData.addAttribs(compElmnt->Attribute("shader")); // attrib 2 is shader
	if(compElmnt->Attribute("texture"))
	{
		// important - attrib 3 is optional! So ensure when reads from init table to check first if attrib exists!
		cameraData.addAttribs(compElmnt->Attribute("texture")); // attrib 3 is texture file path as string
	}
	
	return cameraData;
}

/*
void SceneManager::loadFromXML(std::string filePath)
{
	TiXmlDocument doc(filePath);
	if(!doc.LoadFile())
	{
		std::cout << "Failed to load XML!\n\n\n";
		return;
	}

	TiXmlHandle handle(&doc);
	
	TiXmlElement* goElmnt;
	goElmnt = handle.FirstChildElement("GO").ToElement();
	for(goElmnt; goElmnt != NULL; goElmnt=goElmnt->NextSiblingElement())
	{
		// NOTE: Currently we just assume transform is first. In final version error checking might be in order, otherwise any component that requires transform and innits before it will fail
		unsigned int goID = _objMngr->createGameObject(); // Create GO
		SPtr_Transform trans(nullptr); // this will store the transform if found (for components that requqire it
			
		// Find components
		TiXmlElement* compElmnt = goElmnt->FirstChildElement("COMP");

		for(compElmnt; compElmnt != NULL; compElmnt=compElmnt->NextSiblingElement("COMP"))
		{
			
			// Check type and add component based on it
			if(compElmnt->Attribute("type"))
			{
				int cType; // component type
				compElmnt->Attribute("type", &cType);
				switch (cType)
				{
					case ComponentType::TRANSFORM:
						trans = newTransform(compElmnt);
						_objMngr->addComponent(goID, trans);
						break;
					case ComponentType::CAMERA:
						_objMngr->addComponent(goID, SPtr_Component(new Camera(trans)));
						break;
					case ComponentType::MODL_REND:
						_objMngr->addComponent(goID, newModelRend(compElmnt, trans)); // add model renderer component to object
						break;
				}
			}
		}

		// Find behaviours
		TiXmlElement* behvrElmnt = goElmnt->FirstChildElement("BHVR");
		for(behvrElmnt; behvrElmnt != NULL; behvrElmnt=behvrElmnt->NextSiblingElement("BHVR"))
		{
			// Output type
			if(behvrElmnt->Attribute("type"))
			{
				int bType;
				behvrElmnt->Attribute("type", &bType);
				switch (bType)
				{
				case BehaviourTypes::CAMERA_CON:
					_objMngr->addBehaviour(goID, SPtr_Behaviour(new CameraController()));
					break;
				case BehaviourTypes::ROT_OBJ:
					_objMngr->addBehaviour(goID, SPtr_Behaviour(new RotatingObject()));
					break;
				}
			}
		}
	}
}
*/

// LOADING FUNCTIONS -----------------------------------------------------------------------
// The following functions are to do with reading from XML and converting the info read into
// new components etc. All called from loadFromXML
//------------------------------------------------------------------------------------------
/*
SPtr_Transform SceneManager::newTransform(TiXmlElement* compElmnt)
{
	SPtr_Transform trans(new Transform); // create model renderer linked to transform
	double tx, ty, tz;
	double rx, ry, rz;
	double sx, sy, sz;

	compElmnt->Attribute("tx", &tx);
	compElmnt->Attribute("ty", &ty);
	compElmnt->Attribute("tz", &tz);
	compElmnt->Attribute("rx", &rx);
	compElmnt->Attribute("ry", &ry);
	compElmnt->Attribute("rz", &rz);
	compElmnt->Attribute("sx", &sx);
	compElmnt->Attribute("sy", &sy);
	compElmnt->Attribute("sz", &sz);

	trans->setPosition(glm::vec3(tx, ty, tz));
	trans->setEulerAngles(glm::vec3(rx, ry, rz));
	trans->setScale(glm::vec3(sx, sy, sz));
	

	return trans;
}

SPtr_Component SceneManager::newModelRend(TiXmlElement* compElmnt, SPtr_Transform trans)
{
	std::shared_ptr<ModelRenderer> newModel(new ModelRenderer(trans)); // create model renderer linked to transform

	// Figure out if the mesh is primitive or if it needs to be loaded in
	if(!compElmnt->Attribute("primitive")) return newModel; // return if can't find attrib, something went wrong!
	int isPrimitive;
	compElmnt->Attribute("primitive", &isPrimitive);

	if((bool)isPrimitive)
	{
		int shape;
		compElmnt->Attribute("mesh", &shape);
		newModel->setMesh(Assets::getPrimitiveMesh((PrimitiveShapes::Type)shape)); // set mesh
	}
	else
	{
		// TO DO...
		// Load model from file once mesh loader implemented
	}

	// Get Material Info
	std::string shader = compElmnt->Attribute("shader");
	if(compElmnt->Attribute("texture"))
	{
		std::string texture = compElmnt->Attribute("texture");
		newModel->setMaterial(Assets::getShader(shader), Assets::getTexture(texture)); // set material with shader and texture
	}
	else
	{
		newModel->setMaterial(Assets::getShader(shader)); // set material with just shader
	}


	return newModel;
}
*/
// END LOADING FUNCTIONS------------------------------------------------------------------




// Writes an example scene to XML
void SceneManager::writeDemoXML()
{
	// Ref to demo file
	TiXmlDocument doc(DEMO_SCENE_PATH); // xml file

	// Declaration at start of xml file
	TiXmlDeclaration * decl = new TiXmlDeclaration( "1.0", "", "" ); // version declaration at top of file
	doc.LinkEndChild( decl ); // Add declaration to file, this auto cleans up pointer as well

	// Camera Object
	TiXmlElement * cameraGo = xmlAddGo(&doc, "Camera");
	xmlAddTransform(cameraGo, glm::vec3(0, 0, 5), glm::vec3(), glm::vec3(1, 1, 1));
	xmlAddCamera(cameraGo);
	xmlAddBehaviour(cameraGo, BehaviourTypes::CAMERA_CON);

	// Triangle 01
	TiXmlElement * triGo01 = xmlAddGo(&doc, "Tri01");
	xmlAddTransform(triGo01, glm::vec3(-1, 0, 0), glm::vec3(), glm::vec3(1, 1, 1));
	xmlAddModelRend(triGo01, PrimitiveShapes::TRIANGLE, "diffuse", "sign.png");
	xmlAddBehaviour(triGo01, BehaviourTypes::ROT_OBJ);
	

	// Block 02
	TiXmlElement * cubeGo01 = xmlAddGo(&doc, "Cube01");
	xmlAddTransform(cubeGo01, glm::vec3(0, 0, 0), glm::vec3(), glm::vec3(1, 1, 1));
	xmlAddModelRend(cubeGo01, PrimitiveShapes::CUBE, "specular", "flag.png");
	
	// Save doc
	doc.SaveFile();
}



// SAVING FUNCTIONS -----------------------------------------------------------------------
// The following functions are to do with writing to XML and converting params given
// to correct text in XML file. Currentlt only called from writeDemoXML() but will be 
// part of dynamic file saving system later
//------------------------------------------------------------------------------------------

TiXmlElement* SceneManager::xmlAddGo(TiXmlDocument* doc, std::string name)
{
	TiXmlElement* goElement = new TiXmlElement("GO"); // Game Object Element
	goElement->SetAttribute("name", name); // Set GO name attrib
	doc->LinkEndChild( goElement ); // Add element to file, this auto cleans up pointer as well
	return goElement;
}

void SceneManager::xmlAddTransform(TiXmlElement* go, glm::vec3 t, glm::vec3 r, glm::vec3 s)
{
	TiXmlElement* transElmnt = new TiXmlElement("COMP"); // Component Element
	transElmnt->SetAttribute("type", ComponentType::TRANSFORM); // Set type attrib
	transElmnt->SetAttribute("tx", t.x); // Set translateX attrib
	transElmnt->SetAttribute("ty", t.y); // Set translateY attrib
	transElmnt->SetAttribute("tz", t.z); // Set translateZ attrib
	transElmnt->SetAttribute("rx", r.x); // Set rotateX attrib
	transElmnt->SetAttribute("ry", r.y); // Set rotateY attrib
	transElmnt->SetAttribute("rz", r.z); // Set rotateZ attrib
	transElmnt->SetAttribute("sx", s.x); // Set scaleX attrib
	transElmnt->SetAttribute("sy", s.y); // Set scaleY attrib
	transElmnt->SetAttribute("sz", s.z); // Set scaleZ attrib
	go->LinkEndChild(transElmnt); // Add element to file, this auto cleans up pointer as well
}

void SceneManager::xmlAddCamera(TiXmlElement* go)
{
	TiXmlElement* transElmnt = new TiXmlElement("COMP"); // Component Element
	transElmnt->SetAttribute("type", ComponentType::CAMERA); // Set type attrib
	go->LinkEndChild(transElmnt); // Add element to file, this auto cleans up pointer as well
}

// Add model renderer. The overload just passes empty string for texture - doing this causes it to omit the texture attributte
void SceneManager::xmlAddModelRend(TiXmlElement* go, PrimitiveShapes::Type mesh, std::string shader) { xmlAddModelRend(go, mesh, shader, ""); }
void SceneManager::xmlAddModelRend(TiXmlElement* go, PrimitiveShapes::Type mesh, std::string shader, std::string texture)
{
	TiXmlElement* transElmnt = new TiXmlElement("COMP"); // Component Element
	transElmnt->SetAttribute("type", ComponentType::MODL_REND); // Set type attrib
	transElmnt->SetAttribute("primitive", (int)true); // It is a primitive mesh, not one loaded from file
	transElmnt->SetAttribute("mesh", mesh); // Set mesh attrib
	transElmnt->SetAttribute("shader", shader); // Set material attrib
	if(texture != "") transElmnt->SetAttribute("texture", texture); // Set texture attrib
	go->LinkEndChild(transElmnt); // Add element to file, this auto cleans up pointer as well
}

void SceneManager::xmlAddBehaviour(TiXmlElement* go, BehaviourTypes::Type type)
{
	TiXmlElement* behavElmnt = new TiXmlElement("BHVR"); // behaviour element
	behavElmnt->SetAttribute("type", type);
	go->LinkEndChild(behavElmnt);
}

// END SAVING FUNCTIONS------------------------------------------------------------------