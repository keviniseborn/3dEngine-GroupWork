#ifndef GAME_OBJECT
#define GAME_OBJECT

#include <vector>
#include <memory>

#include "core\component.h"
#include "rendering\camera.h"
#include "rendering\modelRenderer.h"

class GameObject
{
public:
	GameObject(int id);
	~GameObject();

	SPtr_Component addComponent(SPtr_Component component); //!< Adds component then returns it. If failed, the return pointer will be null
	SPtr_Component getComponent(ComponentType::Type type); //!< Returns first component of 'type' it finds, null_ptr if can't find one
	bool checkForComponent(ComponentType::Type type);
	int getId();


private:
	int _id;
	std::vector<SPtr_Component> _components;

};

//! Define shared pointer to component for easy use by systems (allowing shared responsibility for component as multiple systems may store references to it)
typedef std::shared_ptr<GameObject> SPtr_GameObject;

#endif