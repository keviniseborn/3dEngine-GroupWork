#ifndef TRANSFORM_H
#define TRANSFORM_H

//#define GLM_FORCE_RADIANS

#include <glew\GL\glew.h>
#include <glm\glm.hpp>
#include <glm\gtc\type_ptr.hpp>
#include <memory>
#include <glm\gtc\matrix_transform.hpp>

#include "core\component.h"

namespace Direction
{
	const glm::vec3 FORWARD(0, 0, -1);
	const glm::vec3 RIGHT(1, 0, 0);
	const glm::vec3 UP(0, 1, 0);
}


/*! \brief Transform representing position, rotation and scale in 2D space

	A component rather than fundamental property of game object as some
	game objects won't need them (e.g. sound-only, behaviour-only, 2D GUI etc)
*/
class Transform : public Component
{
public:
	Transform();

	// Overridden pure virtuals in component
	ComponentType::Type getType();
	bool isOnePerObject();

	// Data
	glm::mat4 getMatrix(); //!< Returns a copy of the glm::matrix. For openGL use getFloatPointer() instead
	GLfloat* getFloatPointer(); //!< Get matrix as a pointer to first element. Much better to pass around like this for any openGL related stuff
	
	// Transform functions
	
	void setPosition(glm::vec3 pos);
	void setEulerAngles(glm::vec3 ang);
	void setScale(glm::vec3 scale);
	glm::vec3 getPosition();
	glm::vec3 getEulerAngles();
	glm::vec3 getScale();

	void translate(glm::vec3 translation);
	void rotate(glm::vec3 eulerAngles);
	
	void lookAt(glm::vec3 target);

	// Direction functions
	glm::vec3 getForward();
	glm::vec3 getRight();
	glm::vec3 getLeft();

private:
	// VARIABLES
	glm::mat4 _matrix; //!< Transform as a 4x4 matrix
	
	
	glm::vec3 _position; //!< Position as a vector3
	glm::vec3 _rotation; //!< Rotation euler angles. Consider quaternions in the future!
	glm::vec3 _scale; //!< Scale as a vec3
	


	// FUNCTIONS
	glm::mat4 getRotationMatrix();
	void recalculateMatrix(); //!< Call whenever there is a change to pos, rot or scale

};


//! Define shared pointer to component for easy use by systems (allowing shared responsibility for component as multiple systems may store references to it)
typedef std::shared_ptr<Transform> SPtr_Transform;

#endif